{
  "name": "require-analyzer",
  "description": "Determine dependencies for a given node.js file, directory tree, or module in code or on the command line",
  "version": "0.4.0-3",
  "author": {
    "name": "Charlie Robbins",
    "email": "charlie.robbins@gmail.com"
  },
  "contributors": [
    {
      "name": "Marak Squires",
      "email": "marak@nodejitsu.com"
    },
    {
      "name": "Bradley Meck",
      "email": "bradley@nodejitsu.com"
    },
    {
      "name": "Dominic Tarr",
      "email": "dominic@nodejitsu.com"
    },
    {
      "name": "Charlie McConnell",
      "email": "avianflu@nodejitsu.com"
    },
    {
      "name": "Maciej Malecki",
      "email": "maciej@nodejitsu.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/nodejitsu/require-analyzer.git"
  },
  "dependencies": {
    "colors": "0.x.x",
    "findit": "0.0.x",
    "npm": "1.1.4",
    "optimist": "0.2.x",
    "semver": "1.0.x",
    "winston": "0.5.x",
    "detective": "0.0.x",
    "eyes": "0.1.x"
  },
  "devDependencies": {
    "vows": "0.6.x"
  },
  "main": "./lib/require-analyzer",
  "bin": {
    "require-analyzer": "./bin/require-analyzer"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "scripts": {
    "test": "vows test/*-test.js --spec"
  },
  "readme": "# require-analyzer\n\nDetermine dependencies for a given node.js file, directory tree, or module in code or on the command line\n\n## Installation\n\n### Installing npm (node package manager)\n<pre>\n  curl http://npmjs.org/install.sh | sh\n</pre>\n\n### Installing require-analyzer\n<pre>\n  [sudo] npm install require-analyzer\n</pre>\nNOTE: If you're using `npm >= 1.0` then you need to add the `-g` parameter to install `require-analyzer` globally.\n\n## Usage\nThere are two distinct ways to use the `require-analyzer` library: from the command line or through code. The command line tool is designed to work with `package.json` files so make sure that you have created one for your project first. Checkout [jitsu][0] for a quick and easy way to create a package.json.\n\nFor more information read our blog post at [blog.nodejitsu.com][1].\n\n### Command-line usage\nUsing require-analyzer from the command line is easy. The binary will attempt to read the `package.json` file in the current directory, then analyze the dependencies and cross reference the result. \n<pre>\n  $ require-analyzer --help\n  usage: require-analyzer [options] [directory]\n\n  Analyzes the node.js requirements for the target directory. If no directory\n  is supplied then the current directory is used\n\n  options:\n    --update     Update versions for existing dependencies\n    -h, --help   You're staring at it\n</pre>\n\nHere's a sample of `require-analyzer` analyzing it's own dependencies:\n<pre>\n  $ require-analyzer\n  info:  require-analyzer starting in /Users/Charlie/Nodejitsu/require-analyzer\n  warn:  No dependencies found\n  info:  Analyzing dependencies...\n  info:  Done analyzing raw dependencies\n  info:  Retrieved packages from npm\n  info:  Additional dependencies found\n  data:  {\n  data:    findit: '>= 0.0.3',\n  data:    npm: '>= 0.3.18'\n  data:  }\n  info:  Updating /Users/Charlie/Nodejitsu/require-analyzer/package.json\n  info:  require-analyzer updated package.json dependencies\n</pre>\n\n### Programmatic usage\nThe easiest way to use `require-analyzer` programmatically is through the `.analyze()` method. This method will use `fs.stat()` on the path supplied and attempt one of three options:\n\n1. If it is a directory that has a package.json, analyze `require` statements from `package.main`\n2. If it is a directory with no package.json analyze every `.js` or `.coffee` file in the directory tree \n3. If it is a file, then analyze `require` statements from that individual file.\n\nLets dive into a quick sample usage:\n\n```javascript\n  var analyzer = require('require-analyzer');\n  \n  var options = {\n    target: 'path/to/your/dependency' // e.g /Users/some-user/your-package\n    reduce: true\n  };\n  \n  var deps = analyzer.analyze(options, function (err, pkgs) {\n    //\n    // Log all packages that were discovered\n    //\n    console.dir(pkgs);\n  });\n  \n  //\n  // The call the `.analyze()` returns an `EventEmitter` which outputs\n  // data at various stages of the analysis operation.\n  //\n  deps.on('dependencies', function (raw) {\n    //\n    // Log the raw list of dependencies (no versions)\n    //\n    console.dir(raw);\n  });\n  \n  deps.on('search', function (pkgs) {\n    //\n    // Log the results from the npm search operation with the current\n    // active version for each dependency\n    //\n    console.dir(pkgs);\n  });\n  \n  deps.on('reduce', function (reduced) {\n    //\n    // Logs the dependencies after they have been cross-referenced with \n    // sibling dependencies. (i.e. if 'foo' requires 'bar', 'bar' will be removed).\n    //\n    console.dir(reduced);\n  });\n```\n\n### Further analyzing dependencies\nSometimes when dealing with dependencies it is necessary to further analyze the dependencies that are returned. `require-analyzer` has a convenience method for doing just this:\n\n```javascript\n  var analyzer = require('require-analyzer');\n  \n  var current = {\n    'foo': '>= 0.1.0'\n  };\n  \n  var updated = {\n    'foo': '>= 0.2.0',\n    'bar': '>= 0.1.0'\n  };\n  \n  var updates = analyzer.updates(current, updated);\n  \n  //\n  // This will return an object literal with the differential\n  // updates between the two sets of dependencies:\n  //\n  // {\n  //   added: { 'bar': '>= 0.1.0' },\n  //   updated: { 'foo': '>= 0.2.0' }\n  // }\n  //\n```\n\n## Tests\n<pre>\n  npm test\n</pre>\n\n#### Author: [Charlie Robbins][2]\n\n[0]: http://github.com/nodejitsu/jitsu\n[1]: http://blog.nodejitsu.com/analyze-nodejs-dependencies-like-magic\n[2]: http://nodejitsu.com",
  "_id": "require-analyzer@0.4.0-3",
  "_from": "require-analyzer@0.4.0-3"
}
