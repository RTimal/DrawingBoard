{
  "name": "nodejitsu-api",
  "version": "0.3.6",
  "description": "nodejitsu API client wrapper",
  "homepage": "http://github.com/nodejitsu/nodejitsu-api",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodejitsu/nodejitsu-api.git"
  },
  "main": "./lib/client.js",
  "scripts": {
    "test": "vows --spec ./test/commands/*-test.js"
  },
  "dependencies": {
    "request": "2.9.203"
  },
  "devDependencies": {
    "vows": "0.6.x",
    "nock": "0.10.x"
  },
  "author": {
    "name": "Nodejitsu Inc.",
    "email": "info@nodejitsu.com"
  },
  "maintainers": [
    {
      "name": "AvianFlu",
      "email": "avianflu@nodejitsu.com"
    },
    {
      "name": "Marak",
      "email": "marak@nodejitsu.com"
    }
  ],
  "readme": "# nodejitsu-api/node.js\n\nThe Node.JS Nodejitsu-api library enables accessing Nodejitsu's [RESTful API](https://github.com/nodejitsu/handbook/tree/master/API.md).\n\n## Example:\n\n```js\nvar nj = require('nodejitsu-api'),\n    fs = require('fs');\n\nvar client = nj.createClient({\n  username: 'marak',\n  password: 'foobar',\n  remoteUri: 'https://api.nodejitsu.com'\n});\n\nclient.apps.list(function(err, result){\n  if (err) {\n    console.log(err);\n    return;\n  }\n  console.log(JSON.stringify(result, null, 2, true));\n});\n```\n\n## Install:\n\nThis library may be installed using npm:\n\n    npm install nodejitsu-api\n\n## Usage:\n\n\n### api.createClient(options)\n\nThis method sets up a client for connecting to Nodejitsu's databases. Here's a minimal example for connecting to Nodejitsu's API as Marak:\n\n``` js\nvar client = nj.createClient({\n  username: 'marak',\n  password: 'foobar',\n  remoteUri: 'https://api.nodejitsu.com'\n});\n```\n\nThe options object contains three required properties:\n\n* `username`: The username for your Nodejitsu account\n* `password`: The password for your Nodejitsu account\n* `remoteUri`: The uri of the api host (typically [https://api.nodejitsu.com](https://api.nodejitsu.com)).\n\n\n### client\n\nMethod calls are generally structured as `resource` and `action`.\n\n``` js\nclient.resource.action(\"data\", function (err, result) {\n  if (err) {\n    throw err;\n  }\n\n  // use the result\n\n});\n```\n\nMost actions take a string argument and a callback, though a few actions only take a callback.\n\nThe client's methods are reflective of [jitsu's](https://github.com/nodejitsu/jitsu) resources. Here's a broad overview:\n\n* **client.apps**: Manage your application instances. Methods include:\n    * `apps.available`\n    * `apps.list`\n    * `apps.start`\n    * `apps.stop`\n    * `apps.destroy`\n* **client.databases**: Manage your databases. Methods include:\n    * `databases.create`\n    * `databases.destroy`\n    * `databases.list`\n* **client.snapshots**: Manage application snapshots. Methods include:\n    * `snapshots.activate`\n    * `snapshots.create`\n    * `snapshots.destroy`\n    * `snapshots.list`\n* **client.logs**: Manage logs from your applications. Methods include:\n    * `logs.byApp`\n    * `logs.byUser`\n* **client.users**: Manage your nodejitsu acccounts. Methods include:\n    * `users.available`\n    * `users.create`\n    * `users.confirm`\n    * `users.forgot`\n    * `users.update`\n\nand many more...\n\n## Tests\n\nAll tests are written with [vows](http://vowsjs.org) and should be run with [npm](http://npmjs.org):\n\n``` bash\n  $ npm test\n```\n\n## License\n\nMIT.\n",
  "_id": "nodejitsu-api@0.3.6",
  "dist": {
    "shasum": "5980bec6fc6b08945b8d9b18f5c2c68df30a722e"
  },
  "_from": "nodejitsu-api@0.3.6"
}
